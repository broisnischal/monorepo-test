
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `EmailAlias` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model EmailAlias
 * 
 */
export type EmailAliasModel = runtime.Types.Result.DefaultSelection<Prisma.$EmailAliasPayload>

export type AggregateEmailAlias = {
  _count: EmailAliasCountAggregateOutputType | null
  _avg: EmailAliasAvgAggregateOutputType | null
  _sum: EmailAliasSumAggregateOutputType | null
  _min: EmailAliasMinAggregateOutputType | null
  _max: EmailAliasMaxAggregateOutputType | null
}

export type EmailAliasAvgAggregateOutputType = {
  maxAge: number | null
  emailCount: number | null
}

export type EmailAliasSumAggregateOutputType = {
  maxAge: number | null
  emailCount: number | null
}

export type EmailAliasMinAggregateOutputType = {
  id: string | null
  alias: string | null
  domain: string | null
  maxAge: number | null
  userId: string | null
  isActive: boolean | null
  emailCount: number | null
  expiresAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type EmailAliasMaxAggregateOutputType = {
  id: string | null
  alias: string | null
  domain: string | null
  maxAge: number | null
  userId: string | null
  isActive: boolean | null
  emailCount: number | null
  expiresAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type EmailAliasCountAggregateOutputType = {
  id: number
  alias: number
  domain: number
  maxAge: number
  userId: number
  isActive: number
  emailCount: number
  expiresAt: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type EmailAliasAvgAggregateInputType = {
  maxAge?: true
  emailCount?: true
}

export type EmailAliasSumAggregateInputType = {
  maxAge?: true
  emailCount?: true
}

export type EmailAliasMinAggregateInputType = {
  id?: true
  alias?: true
  domain?: true
  maxAge?: true
  userId?: true
  isActive?: true
  emailCount?: true
  expiresAt?: true
  createdAt?: true
  updatedAt?: true
}

export type EmailAliasMaxAggregateInputType = {
  id?: true
  alias?: true
  domain?: true
  maxAge?: true
  userId?: true
  isActive?: true
  emailCount?: true
  expiresAt?: true
  createdAt?: true
  updatedAt?: true
}

export type EmailAliasCountAggregateInputType = {
  id?: true
  alias?: true
  domain?: true
  maxAge?: true
  userId?: true
  isActive?: true
  emailCount?: true
  expiresAt?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type EmailAliasAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EmailAlias to aggregate.
   */
  where?: Prisma.EmailAliasWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmailAliases to fetch.
   */
  orderBy?: Prisma.EmailAliasOrderByWithRelationInput | Prisma.EmailAliasOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EmailAliasWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmailAliases from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmailAliases.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned EmailAliases
  **/
  _count?: true | EmailAliasCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: EmailAliasAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: EmailAliasSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EmailAliasMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EmailAliasMaxAggregateInputType
}

export type GetEmailAliasAggregateType<T extends EmailAliasAggregateArgs> = {
      [P in keyof T & keyof AggregateEmailAlias]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEmailAlias[P]>
    : Prisma.GetScalarType<T[P], AggregateEmailAlias[P]>
}




export type EmailAliasGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EmailAliasWhereInput
  orderBy?: Prisma.EmailAliasOrderByWithAggregationInput | Prisma.EmailAliasOrderByWithAggregationInput[]
  by: Prisma.EmailAliasScalarFieldEnum[] | Prisma.EmailAliasScalarFieldEnum
  having?: Prisma.EmailAliasScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EmailAliasCountAggregateInputType | true
  _avg?: EmailAliasAvgAggregateInputType
  _sum?: EmailAliasSumAggregateInputType
  _min?: EmailAliasMinAggregateInputType
  _max?: EmailAliasMaxAggregateInputType
}

export type EmailAliasGroupByOutputType = {
  id: string
  alias: string
  domain: string
  maxAge: number
  userId: string
  isActive: boolean
  emailCount: number
  expiresAt: Date | null
  createdAt: Date
  updatedAt: Date
  _count: EmailAliasCountAggregateOutputType | null
  _avg: EmailAliasAvgAggregateOutputType | null
  _sum: EmailAliasSumAggregateOutputType | null
  _min: EmailAliasMinAggregateOutputType | null
  _max: EmailAliasMaxAggregateOutputType | null
}

type GetEmailAliasGroupByPayload<T extends EmailAliasGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EmailAliasGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EmailAliasGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EmailAliasGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EmailAliasGroupByOutputType[P]>
      }
    >
  >



export type EmailAliasWhereInput = {
  AND?: Prisma.EmailAliasWhereInput | Prisma.EmailAliasWhereInput[]
  OR?: Prisma.EmailAliasWhereInput[]
  NOT?: Prisma.EmailAliasWhereInput | Prisma.EmailAliasWhereInput[]
  id?: Prisma.StringFilter<"EmailAlias"> | string
  alias?: Prisma.StringFilter<"EmailAlias"> | string
  domain?: Prisma.StringFilter<"EmailAlias"> | string
  maxAge?: Prisma.IntFilter<"EmailAlias"> | number
  userId?: Prisma.StringFilter<"EmailAlias"> | string
  isActive?: Prisma.BoolFilter<"EmailAlias"> | boolean
  emailCount?: Prisma.IntFilter<"EmailAlias"> | number
  expiresAt?: Prisma.DateTimeNullableFilter<"EmailAlias"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"EmailAlias"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"EmailAlias"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  emailLogs?: Prisma.EmailLogListRelationFilter
  email?: Prisma.EmailListRelationFilter
}

export type EmailAliasOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  alias?: Prisma.SortOrder
  domain?: Prisma.SortOrder
  maxAge?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  emailCount?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  emailLogs?: Prisma.EmailLogOrderByRelationAggregateInput
  email?: Prisma.EmailOrderByRelationAggregateInput
}

export type EmailAliasWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  alias?: string
  AND?: Prisma.EmailAliasWhereInput | Prisma.EmailAliasWhereInput[]
  OR?: Prisma.EmailAliasWhereInput[]
  NOT?: Prisma.EmailAliasWhereInput | Prisma.EmailAliasWhereInput[]
  domain?: Prisma.StringFilter<"EmailAlias"> | string
  maxAge?: Prisma.IntFilter<"EmailAlias"> | number
  userId?: Prisma.StringFilter<"EmailAlias"> | string
  isActive?: Prisma.BoolFilter<"EmailAlias"> | boolean
  emailCount?: Prisma.IntFilter<"EmailAlias"> | number
  expiresAt?: Prisma.DateTimeNullableFilter<"EmailAlias"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"EmailAlias"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"EmailAlias"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  emailLogs?: Prisma.EmailLogListRelationFilter
  email?: Prisma.EmailListRelationFilter
}, "id" | "alias">

export type EmailAliasOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  alias?: Prisma.SortOrder
  domain?: Prisma.SortOrder
  maxAge?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  emailCount?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.EmailAliasCountOrderByAggregateInput
  _avg?: Prisma.EmailAliasAvgOrderByAggregateInput
  _max?: Prisma.EmailAliasMaxOrderByAggregateInput
  _min?: Prisma.EmailAliasMinOrderByAggregateInput
  _sum?: Prisma.EmailAliasSumOrderByAggregateInput
}

export type EmailAliasScalarWhereWithAggregatesInput = {
  AND?: Prisma.EmailAliasScalarWhereWithAggregatesInput | Prisma.EmailAliasScalarWhereWithAggregatesInput[]
  OR?: Prisma.EmailAliasScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EmailAliasScalarWhereWithAggregatesInput | Prisma.EmailAliasScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"EmailAlias"> | string
  alias?: Prisma.StringWithAggregatesFilter<"EmailAlias"> | string
  domain?: Prisma.StringWithAggregatesFilter<"EmailAlias"> | string
  maxAge?: Prisma.IntWithAggregatesFilter<"EmailAlias"> | number
  userId?: Prisma.StringWithAggregatesFilter<"EmailAlias"> | string
  isActive?: Prisma.BoolWithAggregatesFilter<"EmailAlias"> | boolean
  emailCount?: Prisma.IntWithAggregatesFilter<"EmailAlias"> | number
  expiresAt?: Prisma.DateTimeNullableWithAggregatesFilter<"EmailAlias"> | Date | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"EmailAlias"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"EmailAlias"> | Date | string
}

export type EmailAliasCreateInput = {
  id?: string
  alias: string
  domain?: string
  maxAge?: number
  isActive?: boolean
  emailCount?: number
  expiresAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutAliasesInput
  emailLogs?: Prisma.EmailLogCreateNestedManyWithoutAliasInput
  email?: Prisma.EmailCreateNestedManyWithoutAliasInput
}

export type EmailAliasUncheckedCreateInput = {
  id?: string
  alias: string
  domain?: string
  maxAge?: number
  userId: string
  isActive?: boolean
  emailCount?: number
  expiresAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  emailLogs?: Prisma.EmailLogUncheckedCreateNestedManyWithoutAliasInput
  email?: Prisma.EmailUncheckedCreateNestedManyWithoutAliasInput
}

export type EmailAliasUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  alias?: Prisma.StringFieldUpdateOperationsInput | string
  domain?: Prisma.StringFieldUpdateOperationsInput | string
  maxAge?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  emailCount?: Prisma.IntFieldUpdateOperationsInput | number
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutAliasesNestedInput
  emailLogs?: Prisma.EmailLogUpdateManyWithoutAliasNestedInput
  email?: Prisma.EmailUpdateManyWithoutAliasNestedInput
}

export type EmailAliasUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  alias?: Prisma.StringFieldUpdateOperationsInput | string
  domain?: Prisma.StringFieldUpdateOperationsInput | string
  maxAge?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  emailCount?: Prisma.IntFieldUpdateOperationsInput | number
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  emailLogs?: Prisma.EmailLogUncheckedUpdateManyWithoutAliasNestedInput
  email?: Prisma.EmailUncheckedUpdateManyWithoutAliasNestedInput
}

export type EmailAliasCreateManyInput = {
  id?: string
  alias: string
  domain?: string
  maxAge?: number
  userId: string
  isActive?: boolean
  emailCount?: number
  expiresAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EmailAliasUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  alias?: Prisma.StringFieldUpdateOperationsInput | string
  domain?: Prisma.StringFieldUpdateOperationsInput | string
  maxAge?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  emailCount?: Prisma.IntFieldUpdateOperationsInput | number
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmailAliasUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  alias?: Prisma.StringFieldUpdateOperationsInput | string
  domain?: Prisma.StringFieldUpdateOperationsInput | string
  maxAge?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  emailCount?: Prisma.IntFieldUpdateOperationsInput | number
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type EmailAliasListRelationFilter = {
  every?: Prisma.EmailAliasWhereInput
  some?: Prisma.EmailAliasWhereInput
  none?: Prisma.EmailAliasWhereInput
}

export type EmailAliasOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type EmailAliasScalarRelationFilter = {
  is?: Prisma.EmailAliasWhereInput
  isNot?: Prisma.EmailAliasWhereInput
}

export type EmailAliasCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  alias?: Prisma.SortOrder
  domain?: Prisma.SortOrder
  maxAge?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  emailCount?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EmailAliasAvgOrderByAggregateInput = {
  maxAge?: Prisma.SortOrder
  emailCount?: Prisma.SortOrder
}

export type EmailAliasMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  alias?: Prisma.SortOrder
  domain?: Prisma.SortOrder
  maxAge?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  emailCount?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EmailAliasMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  alias?: Prisma.SortOrder
  domain?: Prisma.SortOrder
  maxAge?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  emailCount?: Prisma.SortOrder
  expiresAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type EmailAliasSumOrderByAggregateInput = {
  maxAge?: Prisma.SortOrder
  emailCount?: Prisma.SortOrder
}

export type EmailAliasCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.EmailAliasCreateWithoutUserInput, Prisma.EmailAliasUncheckedCreateWithoutUserInput> | Prisma.EmailAliasCreateWithoutUserInput[] | Prisma.EmailAliasUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.EmailAliasCreateOrConnectWithoutUserInput | Prisma.EmailAliasCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.EmailAliasCreateManyUserInputEnvelope
  connect?: Prisma.EmailAliasWhereUniqueInput | Prisma.EmailAliasWhereUniqueInput[]
}

export type EmailAliasUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.EmailAliasCreateWithoutUserInput, Prisma.EmailAliasUncheckedCreateWithoutUserInput> | Prisma.EmailAliasCreateWithoutUserInput[] | Prisma.EmailAliasUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.EmailAliasCreateOrConnectWithoutUserInput | Prisma.EmailAliasCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.EmailAliasCreateManyUserInputEnvelope
  connect?: Prisma.EmailAliasWhereUniqueInput | Prisma.EmailAliasWhereUniqueInput[]
}

export type EmailAliasUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.EmailAliasCreateWithoutUserInput, Prisma.EmailAliasUncheckedCreateWithoutUserInput> | Prisma.EmailAliasCreateWithoutUserInput[] | Prisma.EmailAliasUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.EmailAliasCreateOrConnectWithoutUserInput | Prisma.EmailAliasCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.EmailAliasUpsertWithWhereUniqueWithoutUserInput | Prisma.EmailAliasUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.EmailAliasCreateManyUserInputEnvelope
  set?: Prisma.EmailAliasWhereUniqueInput | Prisma.EmailAliasWhereUniqueInput[]
  disconnect?: Prisma.EmailAliasWhereUniqueInput | Prisma.EmailAliasWhereUniqueInput[]
  delete?: Prisma.EmailAliasWhereUniqueInput | Prisma.EmailAliasWhereUniqueInput[]
  connect?: Prisma.EmailAliasWhereUniqueInput | Prisma.EmailAliasWhereUniqueInput[]
  update?: Prisma.EmailAliasUpdateWithWhereUniqueWithoutUserInput | Prisma.EmailAliasUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.EmailAliasUpdateManyWithWhereWithoutUserInput | Prisma.EmailAliasUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.EmailAliasScalarWhereInput | Prisma.EmailAliasScalarWhereInput[]
}

export type EmailAliasUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.EmailAliasCreateWithoutUserInput, Prisma.EmailAliasUncheckedCreateWithoutUserInput> | Prisma.EmailAliasCreateWithoutUserInput[] | Prisma.EmailAliasUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.EmailAliasCreateOrConnectWithoutUserInput | Prisma.EmailAliasCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.EmailAliasUpsertWithWhereUniqueWithoutUserInput | Prisma.EmailAliasUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.EmailAliasCreateManyUserInputEnvelope
  set?: Prisma.EmailAliasWhereUniqueInput | Prisma.EmailAliasWhereUniqueInput[]
  disconnect?: Prisma.EmailAliasWhereUniqueInput | Prisma.EmailAliasWhereUniqueInput[]
  delete?: Prisma.EmailAliasWhereUniqueInput | Prisma.EmailAliasWhereUniqueInput[]
  connect?: Prisma.EmailAliasWhereUniqueInput | Prisma.EmailAliasWhereUniqueInput[]
  update?: Prisma.EmailAliasUpdateWithWhereUniqueWithoutUserInput | Prisma.EmailAliasUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.EmailAliasUpdateManyWithWhereWithoutUserInput | Prisma.EmailAliasUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.EmailAliasScalarWhereInput | Prisma.EmailAliasScalarWhereInput[]
}

export type EmailAliasCreateNestedOneWithoutEmailInput = {
  create?: Prisma.XOR<Prisma.EmailAliasCreateWithoutEmailInput, Prisma.EmailAliasUncheckedCreateWithoutEmailInput>
  connectOrCreate?: Prisma.EmailAliasCreateOrConnectWithoutEmailInput
  connect?: Prisma.EmailAliasWhereUniqueInput
}

export type EmailAliasUpdateOneRequiredWithoutEmailNestedInput = {
  create?: Prisma.XOR<Prisma.EmailAliasCreateWithoutEmailInput, Prisma.EmailAliasUncheckedCreateWithoutEmailInput>
  connectOrCreate?: Prisma.EmailAliasCreateOrConnectWithoutEmailInput
  upsert?: Prisma.EmailAliasUpsertWithoutEmailInput
  connect?: Prisma.EmailAliasWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.EmailAliasUpdateToOneWithWhereWithoutEmailInput, Prisma.EmailAliasUpdateWithoutEmailInput>, Prisma.EmailAliasUncheckedUpdateWithoutEmailInput>
}

export type EmailAliasCreateNestedOneWithoutEmailLogsInput = {
  create?: Prisma.XOR<Prisma.EmailAliasCreateWithoutEmailLogsInput, Prisma.EmailAliasUncheckedCreateWithoutEmailLogsInput>
  connectOrCreate?: Prisma.EmailAliasCreateOrConnectWithoutEmailLogsInput
  connect?: Prisma.EmailAliasWhereUniqueInput
}

export type EmailAliasUpdateOneRequiredWithoutEmailLogsNestedInput = {
  create?: Prisma.XOR<Prisma.EmailAliasCreateWithoutEmailLogsInput, Prisma.EmailAliasUncheckedCreateWithoutEmailLogsInput>
  connectOrCreate?: Prisma.EmailAliasCreateOrConnectWithoutEmailLogsInput
  upsert?: Prisma.EmailAliasUpsertWithoutEmailLogsInput
  connect?: Prisma.EmailAliasWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.EmailAliasUpdateToOneWithWhereWithoutEmailLogsInput, Prisma.EmailAliasUpdateWithoutEmailLogsInput>, Prisma.EmailAliasUncheckedUpdateWithoutEmailLogsInput>
}

export type EmailAliasCreateWithoutUserInput = {
  id?: string
  alias: string
  domain?: string
  maxAge?: number
  isActive?: boolean
  emailCount?: number
  expiresAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  emailLogs?: Prisma.EmailLogCreateNestedManyWithoutAliasInput
  email?: Prisma.EmailCreateNestedManyWithoutAliasInput
}

export type EmailAliasUncheckedCreateWithoutUserInput = {
  id?: string
  alias: string
  domain?: string
  maxAge?: number
  isActive?: boolean
  emailCount?: number
  expiresAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  emailLogs?: Prisma.EmailLogUncheckedCreateNestedManyWithoutAliasInput
  email?: Prisma.EmailUncheckedCreateNestedManyWithoutAliasInput
}

export type EmailAliasCreateOrConnectWithoutUserInput = {
  where: Prisma.EmailAliasWhereUniqueInput
  create: Prisma.XOR<Prisma.EmailAliasCreateWithoutUserInput, Prisma.EmailAliasUncheckedCreateWithoutUserInput>
}

export type EmailAliasCreateManyUserInputEnvelope = {
  data: Prisma.EmailAliasCreateManyUserInput | Prisma.EmailAliasCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type EmailAliasUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.EmailAliasWhereUniqueInput
  update: Prisma.XOR<Prisma.EmailAliasUpdateWithoutUserInput, Prisma.EmailAliasUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.EmailAliasCreateWithoutUserInput, Prisma.EmailAliasUncheckedCreateWithoutUserInput>
}

export type EmailAliasUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.EmailAliasWhereUniqueInput
  data: Prisma.XOR<Prisma.EmailAliasUpdateWithoutUserInput, Prisma.EmailAliasUncheckedUpdateWithoutUserInput>
}

export type EmailAliasUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.EmailAliasScalarWhereInput
  data: Prisma.XOR<Prisma.EmailAliasUpdateManyMutationInput, Prisma.EmailAliasUncheckedUpdateManyWithoutUserInput>
}

export type EmailAliasScalarWhereInput = {
  AND?: Prisma.EmailAliasScalarWhereInput | Prisma.EmailAliasScalarWhereInput[]
  OR?: Prisma.EmailAliasScalarWhereInput[]
  NOT?: Prisma.EmailAliasScalarWhereInput | Prisma.EmailAliasScalarWhereInput[]
  id?: Prisma.StringFilter<"EmailAlias"> | string
  alias?: Prisma.StringFilter<"EmailAlias"> | string
  domain?: Prisma.StringFilter<"EmailAlias"> | string
  maxAge?: Prisma.IntFilter<"EmailAlias"> | number
  userId?: Prisma.StringFilter<"EmailAlias"> | string
  isActive?: Prisma.BoolFilter<"EmailAlias"> | boolean
  emailCount?: Prisma.IntFilter<"EmailAlias"> | number
  expiresAt?: Prisma.DateTimeNullableFilter<"EmailAlias"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"EmailAlias"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"EmailAlias"> | Date | string
}

export type EmailAliasCreateWithoutEmailInput = {
  id?: string
  alias: string
  domain?: string
  maxAge?: number
  isActive?: boolean
  emailCount?: number
  expiresAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutAliasesInput
  emailLogs?: Prisma.EmailLogCreateNestedManyWithoutAliasInput
}

export type EmailAliasUncheckedCreateWithoutEmailInput = {
  id?: string
  alias: string
  domain?: string
  maxAge?: number
  userId: string
  isActive?: boolean
  emailCount?: number
  expiresAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  emailLogs?: Prisma.EmailLogUncheckedCreateNestedManyWithoutAliasInput
}

export type EmailAliasCreateOrConnectWithoutEmailInput = {
  where: Prisma.EmailAliasWhereUniqueInput
  create: Prisma.XOR<Prisma.EmailAliasCreateWithoutEmailInput, Prisma.EmailAliasUncheckedCreateWithoutEmailInput>
}

export type EmailAliasUpsertWithoutEmailInput = {
  update: Prisma.XOR<Prisma.EmailAliasUpdateWithoutEmailInput, Prisma.EmailAliasUncheckedUpdateWithoutEmailInput>
  create: Prisma.XOR<Prisma.EmailAliasCreateWithoutEmailInput, Prisma.EmailAliasUncheckedCreateWithoutEmailInput>
  where?: Prisma.EmailAliasWhereInput
}

export type EmailAliasUpdateToOneWithWhereWithoutEmailInput = {
  where?: Prisma.EmailAliasWhereInput
  data: Prisma.XOR<Prisma.EmailAliasUpdateWithoutEmailInput, Prisma.EmailAliasUncheckedUpdateWithoutEmailInput>
}

export type EmailAliasUpdateWithoutEmailInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  alias?: Prisma.StringFieldUpdateOperationsInput | string
  domain?: Prisma.StringFieldUpdateOperationsInput | string
  maxAge?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  emailCount?: Prisma.IntFieldUpdateOperationsInput | number
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutAliasesNestedInput
  emailLogs?: Prisma.EmailLogUpdateManyWithoutAliasNestedInput
}

export type EmailAliasUncheckedUpdateWithoutEmailInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  alias?: Prisma.StringFieldUpdateOperationsInput | string
  domain?: Prisma.StringFieldUpdateOperationsInput | string
  maxAge?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  emailCount?: Prisma.IntFieldUpdateOperationsInput | number
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  emailLogs?: Prisma.EmailLogUncheckedUpdateManyWithoutAliasNestedInput
}

export type EmailAliasCreateWithoutEmailLogsInput = {
  id?: string
  alias: string
  domain?: string
  maxAge?: number
  isActive?: boolean
  emailCount?: number
  expiresAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutAliasesInput
  email?: Prisma.EmailCreateNestedManyWithoutAliasInput
}

export type EmailAliasUncheckedCreateWithoutEmailLogsInput = {
  id?: string
  alias: string
  domain?: string
  maxAge?: number
  userId: string
  isActive?: boolean
  emailCount?: number
  expiresAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  email?: Prisma.EmailUncheckedCreateNestedManyWithoutAliasInput
}

export type EmailAliasCreateOrConnectWithoutEmailLogsInput = {
  where: Prisma.EmailAliasWhereUniqueInput
  create: Prisma.XOR<Prisma.EmailAliasCreateWithoutEmailLogsInput, Prisma.EmailAliasUncheckedCreateWithoutEmailLogsInput>
}

export type EmailAliasUpsertWithoutEmailLogsInput = {
  update: Prisma.XOR<Prisma.EmailAliasUpdateWithoutEmailLogsInput, Prisma.EmailAliasUncheckedUpdateWithoutEmailLogsInput>
  create: Prisma.XOR<Prisma.EmailAliasCreateWithoutEmailLogsInput, Prisma.EmailAliasUncheckedCreateWithoutEmailLogsInput>
  where?: Prisma.EmailAliasWhereInput
}

export type EmailAliasUpdateToOneWithWhereWithoutEmailLogsInput = {
  where?: Prisma.EmailAliasWhereInput
  data: Prisma.XOR<Prisma.EmailAliasUpdateWithoutEmailLogsInput, Prisma.EmailAliasUncheckedUpdateWithoutEmailLogsInput>
}

export type EmailAliasUpdateWithoutEmailLogsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  alias?: Prisma.StringFieldUpdateOperationsInput | string
  domain?: Prisma.StringFieldUpdateOperationsInput | string
  maxAge?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  emailCount?: Prisma.IntFieldUpdateOperationsInput | number
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutAliasesNestedInput
  email?: Prisma.EmailUpdateManyWithoutAliasNestedInput
}

export type EmailAliasUncheckedUpdateWithoutEmailLogsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  alias?: Prisma.StringFieldUpdateOperationsInput | string
  domain?: Prisma.StringFieldUpdateOperationsInput | string
  maxAge?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  emailCount?: Prisma.IntFieldUpdateOperationsInput | number
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  email?: Prisma.EmailUncheckedUpdateManyWithoutAliasNestedInput
}

export type EmailAliasCreateManyUserInput = {
  id?: string
  alias: string
  domain?: string
  maxAge?: number
  isActive?: boolean
  emailCount?: number
  expiresAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type EmailAliasUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  alias?: Prisma.StringFieldUpdateOperationsInput | string
  domain?: Prisma.StringFieldUpdateOperationsInput | string
  maxAge?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  emailCount?: Prisma.IntFieldUpdateOperationsInput | number
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  emailLogs?: Prisma.EmailLogUpdateManyWithoutAliasNestedInput
  email?: Prisma.EmailUpdateManyWithoutAliasNestedInput
}

export type EmailAliasUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  alias?: Prisma.StringFieldUpdateOperationsInput | string
  domain?: Prisma.StringFieldUpdateOperationsInput | string
  maxAge?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  emailCount?: Prisma.IntFieldUpdateOperationsInput | number
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  emailLogs?: Prisma.EmailLogUncheckedUpdateManyWithoutAliasNestedInput
  email?: Prisma.EmailUncheckedUpdateManyWithoutAliasNestedInput
}

export type EmailAliasUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  alias?: Prisma.StringFieldUpdateOperationsInput | string
  domain?: Prisma.StringFieldUpdateOperationsInput | string
  maxAge?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  emailCount?: Prisma.IntFieldUpdateOperationsInput | number
  expiresAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type EmailAliasCountOutputType
 */

export type EmailAliasCountOutputType = {
  emailLogs: number
  email: number
}

export type EmailAliasCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  emailLogs?: boolean | EmailAliasCountOutputTypeCountEmailLogsArgs
  email?: boolean | EmailAliasCountOutputTypeCountEmailArgs
}

/**
 * EmailAliasCountOutputType without action
 */
export type EmailAliasCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailAliasCountOutputType
   */
  select?: Prisma.EmailAliasCountOutputTypeSelect<ExtArgs> | null
}

/**
 * EmailAliasCountOutputType without action
 */
export type EmailAliasCountOutputTypeCountEmailLogsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EmailLogWhereInput
}

/**
 * EmailAliasCountOutputType without action
 */
export type EmailAliasCountOutputTypeCountEmailArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EmailWhereInput
}


export type EmailAliasSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  alias?: boolean
  domain?: boolean
  maxAge?: boolean
  userId?: boolean
  isActive?: boolean
  emailCount?: boolean
  expiresAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  emailLogs?: boolean | Prisma.EmailAlias$emailLogsArgs<ExtArgs>
  email?: boolean | Prisma.EmailAlias$emailArgs<ExtArgs>
  _count?: boolean | Prisma.EmailAliasCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["emailAlias"]>

export type EmailAliasSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  alias?: boolean
  domain?: boolean
  maxAge?: boolean
  userId?: boolean
  isActive?: boolean
  emailCount?: boolean
  expiresAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["emailAlias"]>

export type EmailAliasSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  alias?: boolean
  domain?: boolean
  maxAge?: boolean
  userId?: boolean
  isActive?: boolean
  emailCount?: boolean
  expiresAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["emailAlias"]>

export type EmailAliasSelectScalar = {
  id?: boolean
  alias?: boolean
  domain?: boolean
  maxAge?: boolean
  userId?: boolean
  isActive?: boolean
  emailCount?: boolean
  expiresAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type EmailAliasOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "alias" | "domain" | "maxAge" | "userId" | "isActive" | "emailCount" | "expiresAt" | "createdAt" | "updatedAt", ExtArgs["result"]["emailAlias"]>
export type EmailAliasInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  emailLogs?: boolean | Prisma.EmailAlias$emailLogsArgs<ExtArgs>
  email?: boolean | Prisma.EmailAlias$emailArgs<ExtArgs>
  _count?: boolean | Prisma.EmailAliasCountOutputTypeDefaultArgs<ExtArgs>
}
export type EmailAliasIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type EmailAliasIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $EmailAliasPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "EmailAlias"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    emailLogs: Prisma.$EmailLogPayload<ExtArgs>[]
    email: Prisma.$EmailPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    alias: string
    domain: string
    maxAge: number
    userId: string
    isActive: boolean
    emailCount: number
    expiresAt: Date | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["emailAlias"]>
  composites: {}
}

export type EmailAliasGetPayload<S extends boolean | null | undefined | EmailAliasDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EmailAliasPayload, S>

export type EmailAliasCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EmailAliasFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EmailAliasCountAggregateInputType | true
  }

export interface EmailAliasDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailAlias'], meta: { name: 'EmailAlias' } }
  /**
   * Find zero or one EmailAlias that matches the filter.
   * @param {EmailAliasFindUniqueArgs} args - Arguments to find a EmailAlias
   * @example
   * // Get one EmailAlias
   * const emailAlias = await prisma.emailAlias.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EmailAliasFindUniqueArgs>(args: Prisma.SelectSubset<T, EmailAliasFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EmailAliasClient<runtime.Types.Result.GetResult<Prisma.$EmailAliasPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one EmailAlias that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EmailAliasFindUniqueOrThrowArgs} args - Arguments to find a EmailAlias
   * @example
   * // Get one EmailAlias
   * const emailAlias = await prisma.emailAlias.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EmailAliasFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EmailAliasFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EmailAliasClient<runtime.Types.Result.GetResult<Prisma.$EmailAliasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EmailAlias that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailAliasFindFirstArgs} args - Arguments to find a EmailAlias
   * @example
   * // Get one EmailAlias
   * const emailAlias = await prisma.emailAlias.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EmailAliasFindFirstArgs>(args?: Prisma.SelectSubset<T, EmailAliasFindFirstArgs<ExtArgs>>): Prisma.Prisma__EmailAliasClient<runtime.Types.Result.GetResult<Prisma.$EmailAliasPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EmailAlias that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailAliasFindFirstOrThrowArgs} args - Arguments to find a EmailAlias
   * @example
   * // Get one EmailAlias
   * const emailAlias = await prisma.emailAlias.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EmailAliasFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EmailAliasFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EmailAliasClient<runtime.Types.Result.GetResult<Prisma.$EmailAliasPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more EmailAliases that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailAliasFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all EmailAliases
   * const emailAliases = await prisma.emailAlias.findMany()
   * 
   * // Get first 10 EmailAliases
   * const emailAliases = await prisma.emailAlias.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const emailAliasWithIdOnly = await prisma.emailAlias.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EmailAliasFindManyArgs>(args?: Prisma.SelectSubset<T, EmailAliasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmailAliasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a EmailAlias.
   * @param {EmailAliasCreateArgs} args - Arguments to create a EmailAlias.
   * @example
   * // Create one EmailAlias
   * const EmailAlias = await prisma.emailAlias.create({
   *   data: {
   *     // ... data to create a EmailAlias
   *   }
   * })
   * 
   */
  create<T extends EmailAliasCreateArgs>(args: Prisma.SelectSubset<T, EmailAliasCreateArgs<ExtArgs>>): Prisma.Prisma__EmailAliasClient<runtime.Types.Result.GetResult<Prisma.$EmailAliasPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many EmailAliases.
   * @param {EmailAliasCreateManyArgs} args - Arguments to create many EmailAliases.
   * @example
   * // Create many EmailAliases
   * const emailAlias = await prisma.emailAlias.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EmailAliasCreateManyArgs>(args?: Prisma.SelectSubset<T, EmailAliasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many EmailAliases and returns the data saved in the database.
   * @param {EmailAliasCreateManyAndReturnArgs} args - Arguments to create many EmailAliases.
   * @example
   * // Create many EmailAliases
   * const emailAlias = await prisma.emailAlias.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many EmailAliases and only return the `id`
   * const emailAliasWithIdOnly = await prisma.emailAlias.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends EmailAliasCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, EmailAliasCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmailAliasPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a EmailAlias.
   * @param {EmailAliasDeleteArgs} args - Arguments to delete one EmailAlias.
   * @example
   * // Delete one EmailAlias
   * const EmailAlias = await prisma.emailAlias.delete({
   *   where: {
   *     // ... filter to delete one EmailAlias
   *   }
   * })
   * 
   */
  delete<T extends EmailAliasDeleteArgs>(args: Prisma.SelectSubset<T, EmailAliasDeleteArgs<ExtArgs>>): Prisma.Prisma__EmailAliasClient<runtime.Types.Result.GetResult<Prisma.$EmailAliasPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one EmailAlias.
   * @param {EmailAliasUpdateArgs} args - Arguments to update one EmailAlias.
   * @example
   * // Update one EmailAlias
   * const emailAlias = await prisma.emailAlias.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EmailAliasUpdateArgs>(args: Prisma.SelectSubset<T, EmailAliasUpdateArgs<ExtArgs>>): Prisma.Prisma__EmailAliasClient<runtime.Types.Result.GetResult<Prisma.$EmailAliasPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more EmailAliases.
   * @param {EmailAliasDeleteManyArgs} args - Arguments to filter EmailAliases to delete.
   * @example
   * // Delete a few EmailAliases
   * const { count } = await prisma.emailAlias.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EmailAliasDeleteManyArgs>(args?: Prisma.SelectSubset<T, EmailAliasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EmailAliases.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailAliasUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many EmailAliases
   * const emailAlias = await prisma.emailAlias.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EmailAliasUpdateManyArgs>(args: Prisma.SelectSubset<T, EmailAliasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EmailAliases and returns the data updated in the database.
   * @param {EmailAliasUpdateManyAndReturnArgs} args - Arguments to update many EmailAliases.
   * @example
   * // Update many EmailAliases
   * const emailAlias = await prisma.emailAlias.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more EmailAliases and only return the `id`
   * const emailAliasWithIdOnly = await prisma.emailAlias.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends EmailAliasUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, EmailAliasUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmailAliasPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one EmailAlias.
   * @param {EmailAliasUpsertArgs} args - Arguments to update or create a EmailAlias.
   * @example
   * // Update or create a EmailAlias
   * const emailAlias = await prisma.emailAlias.upsert({
   *   create: {
   *     // ... data to create a EmailAlias
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the EmailAlias we want to update
   *   }
   * })
   */
  upsert<T extends EmailAliasUpsertArgs>(args: Prisma.SelectSubset<T, EmailAliasUpsertArgs<ExtArgs>>): Prisma.Prisma__EmailAliasClient<runtime.Types.Result.GetResult<Prisma.$EmailAliasPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of EmailAliases.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailAliasCountArgs} args - Arguments to filter EmailAliases to count.
   * @example
   * // Count the number of EmailAliases
   * const count = await prisma.emailAlias.count({
   *   where: {
   *     // ... the filter for the EmailAliases we want to count
   *   }
   * })
  **/
  count<T extends EmailAliasCountArgs>(
    args?: Prisma.Subset<T, EmailAliasCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EmailAliasCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a EmailAlias.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailAliasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EmailAliasAggregateArgs>(args: Prisma.Subset<T, EmailAliasAggregateArgs>): Prisma.PrismaPromise<GetEmailAliasAggregateType<T>>

  /**
   * Group by EmailAlias.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailAliasGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EmailAliasGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EmailAliasGroupByArgs['orderBy'] }
      : { orderBy?: EmailAliasGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EmailAliasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailAliasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the EmailAlias model
 */
readonly fields: EmailAliasFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for EmailAlias.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EmailAliasClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  emailLogs<T extends Prisma.EmailAlias$emailLogsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EmailAlias$emailLogsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  email<T extends Prisma.EmailAlias$emailArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.EmailAlias$emailArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the EmailAlias model
 */
export interface EmailAliasFieldRefs {
  readonly id: Prisma.FieldRef<"EmailAlias", 'String'>
  readonly alias: Prisma.FieldRef<"EmailAlias", 'String'>
  readonly domain: Prisma.FieldRef<"EmailAlias", 'String'>
  readonly maxAge: Prisma.FieldRef<"EmailAlias", 'Int'>
  readonly userId: Prisma.FieldRef<"EmailAlias", 'String'>
  readonly isActive: Prisma.FieldRef<"EmailAlias", 'Boolean'>
  readonly emailCount: Prisma.FieldRef<"EmailAlias", 'Int'>
  readonly expiresAt: Prisma.FieldRef<"EmailAlias", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"EmailAlias", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"EmailAlias", 'DateTime'>
}
    

// Custom InputTypes
/**
 * EmailAlias findUnique
 */
export type EmailAliasFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailAlias
   */
  select?: Prisma.EmailAliasSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailAlias
   */
  omit?: Prisma.EmailAliasOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailAliasInclude<ExtArgs> | null
  /**
   * Filter, which EmailAlias to fetch.
   */
  where: Prisma.EmailAliasWhereUniqueInput
}

/**
 * EmailAlias findUniqueOrThrow
 */
export type EmailAliasFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailAlias
   */
  select?: Prisma.EmailAliasSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailAlias
   */
  omit?: Prisma.EmailAliasOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailAliasInclude<ExtArgs> | null
  /**
   * Filter, which EmailAlias to fetch.
   */
  where: Prisma.EmailAliasWhereUniqueInput
}

/**
 * EmailAlias findFirst
 */
export type EmailAliasFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailAlias
   */
  select?: Prisma.EmailAliasSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailAlias
   */
  omit?: Prisma.EmailAliasOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailAliasInclude<ExtArgs> | null
  /**
   * Filter, which EmailAlias to fetch.
   */
  where?: Prisma.EmailAliasWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmailAliases to fetch.
   */
  orderBy?: Prisma.EmailAliasOrderByWithRelationInput | Prisma.EmailAliasOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EmailAliases.
   */
  cursor?: Prisma.EmailAliasWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmailAliases from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmailAliases.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EmailAliases.
   */
  distinct?: Prisma.EmailAliasScalarFieldEnum | Prisma.EmailAliasScalarFieldEnum[]
}

/**
 * EmailAlias findFirstOrThrow
 */
export type EmailAliasFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailAlias
   */
  select?: Prisma.EmailAliasSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailAlias
   */
  omit?: Prisma.EmailAliasOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailAliasInclude<ExtArgs> | null
  /**
   * Filter, which EmailAlias to fetch.
   */
  where?: Prisma.EmailAliasWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmailAliases to fetch.
   */
  orderBy?: Prisma.EmailAliasOrderByWithRelationInput | Prisma.EmailAliasOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EmailAliases.
   */
  cursor?: Prisma.EmailAliasWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmailAliases from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmailAliases.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EmailAliases.
   */
  distinct?: Prisma.EmailAliasScalarFieldEnum | Prisma.EmailAliasScalarFieldEnum[]
}

/**
 * EmailAlias findMany
 */
export type EmailAliasFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailAlias
   */
  select?: Prisma.EmailAliasSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailAlias
   */
  omit?: Prisma.EmailAliasOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailAliasInclude<ExtArgs> | null
  /**
   * Filter, which EmailAliases to fetch.
   */
  where?: Prisma.EmailAliasWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmailAliases to fetch.
   */
  orderBy?: Prisma.EmailAliasOrderByWithRelationInput | Prisma.EmailAliasOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing EmailAliases.
   */
  cursor?: Prisma.EmailAliasWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmailAliases from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmailAliases.
   */
  skip?: number
  distinct?: Prisma.EmailAliasScalarFieldEnum | Prisma.EmailAliasScalarFieldEnum[]
}

/**
 * EmailAlias create
 */
export type EmailAliasCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailAlias
   */
  select?: Prisma.EmailAliasSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailAlias
   */
  omit?: Prisma.EmailAliasOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailAliasInclude<ExtArgs> | null
  /**
   * The data needed to create a EmailAlias.
   */
  data: Prisma.XOR<Prisma.EmailAliasCreateInput, Prisma.EmailAliasUncheckedCreateInput>
}

/**
 * EmailAlias createMany
 */
export type EmailAliasCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many EmailAliases.
   */
  data: Prisma.EmailAliasCreateManyInput | Prisma.EmailAliasCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * EmailAlias createManyAndReturn
 */
export type EmailAliasCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailAlias
   */
  select?: Prisma.EmailAliasSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EmailAlias
   */
  omit?: Prisma.EmailAliasOmit<ExtArgs> | null
  /**
   * The data used to create many EmailAliases.
   */
  data: Prisma.EmailAliasCreateManyInput | Prisma.EmailAliasCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailAliasIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * EmailAlias update
 */
export type EmailAliasUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailAlias
   */
  select?: Prisma.EmailAliasSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailAlias
   */
  omit?: Prisma.EmailAliasOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailAliasInclude<ExtArgs> | null
  /**
   * The data needed to update a EmailAlias.
   */
  data: Prisma.XOR<Prisma.EmailAliasUpdateInput, Prisma.EmailAliasUncheckedUpdateInput>
  /**
   * Choose, which EmailAlias to update.
   */
  where: Prisma.EmailAliasWhereUniqueInput
}

/**
 * EmailAlias updateMany
 */
export type EmailAliasUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update EmailAliases.
   */
  data: Prisma.XOR<Prisma.EmailAliasUpdateManyMutationInput, Prisma.EmailAliasUncheckedUpdateManyInput>
  /**
   * Filter which EmailAliases to update
   */
  where?: Prisma.EmailAliasWhereInput
  /**
   * Limit how many EmailAliases to update.
   */
  limit?: number
}

/**
 * EmailAlias updateManyAndReturn
 */
export type EmailAliasUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailAlias
   */
  select?: Prisma.EmailAliasSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EmailAlias
   */
  omit?: Prisma.EmailAliasOmit<ExtArgs> | null
  /**
   * The data used to update EmailAliases.
   */
  data: Prisma.XOR<Prisma.EmailAliasUpdateManyMutationInput, Prisma.EmailAliasUncheckedUpdateManyInput>
  /**
   * Filter which EmailAliases to update
   */
  where?: Prisma.EmailAliasWhereInput
  /**
   * Limit how many EmailAliases to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailAliasIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * EmailAlias upsert
 */
export type EmailAliasUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailAlias
   */
  select?: Prisma.EmailAliasSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailAlias
   */
  omit?: Prisma.EmailAliasOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailAliasInclude<ExtArgs> | null
  /**
   * The filter to search for the EmailAlias to update in case it exists.
   */
  where: Prisma.EmailAliasWhereUniqueInput
  /**
   * In case the EmailAlias found by the `where` argument doesn't exist, create a new EmailAlias with this data.
   */
  create: Prisma.XOR<Prisma.EmailAliasCreateInput, Prisma.EmailAliasUncheckedCreateInput>
  /**
   * In case the EmailAlias was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EmailAliasUpdateInput, Prisma.EmailAliasUncheckedUpdateInput>
}

/**
 * EmailAlias delete
 */
export type EmailAliasDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailAlias
   */
  select?: Prisma.EmailAliasSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailAlias
   */
  omit?: Prisma.EmailAliasOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailAliasInclude<ExtArgs> | null
  /**
   * Filter which EmailAlias to delete.
   */
  where: Prisma.EmailAliasWhereUniqueInput
}

/**
 * EmailAlias deleteMany
 */
export type EmailAliasDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EmailAliases to delete
   */
  where?: Prisma.EmailAliasWhereInput
  /**
   * Limit how many EmailAliases to delete.
   */
  limit?: number
}

/**
 * EmailAlias.emailLogs
 */
export type EmailAlias$emailLogsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailLog
   */
  select?: Prisma.EmailLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailLog
   */
  omit?: Prisma.EmailLogOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailLogInclude<ExtArgs> | null
  where?: Prisma.EmailLogWhereInput
  orderBy?: Prisma.EmailLogOrderByWithRelationInput | Prisma.EmailLogOrderByWithRelationInput[]
  cursor?: Prisma.EmailLogWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.EmailLogScalarFieldEnum | Prisma.EmailLogScalarFieldEnum[]
}

/**
 * EmailAlias.email
 */
export type EmailAlias$emailArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Email
   */
  select?: Prisma.EmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Email
   */
  omit?: Prisma.EmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailInclude<ExtArgs> | null
  where?: Prisma.EmailWhereInput
  orderBy?: Prisma.EmailOrderByWithRelationInput | Prisma.EmailOrderByWithRelationInput[]
  cursor?: Prisma.EmailWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.EmailScalarFieldEnum | Prisma.EmailScalarFieldEnum[]
}

/**
 * EmailAlias without action
 */
export type EmailAliasDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailAlias
   */
  select?: Prisma.EmailAliasSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailAlias
   */
  omit?: Prisma.EmailAliasOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailAliasInclude<ExtArgs> | null
}
